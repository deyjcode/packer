<# 
Builds Packer Images for Windows Server 2012 and 2016.

Optional: Uploads the packer image to Vagrant Cloud.
Requires a Vagrant Cloud account. 

Use the module PSVagrantCloud to create tokens, create images, etc. before running this build script!

AUTHOR: steven jennings <steven@automatingops.com>

#>
[CmdletBinding()]
param (
    [Parameter(Mandatory = $true)]
    [string]$BoxUser,

    [ValidateSet("Win2012R2Std", "Win2012R2Core", "Win2016Core", "Win2016Std")]
    [Parameter(
        Mandatory = $true,
        HelpMessage = "Valid Values: Win2012R2Std, Win2012R2Core, Win2016Core, Win2016Std"
        )]
    [string]$OperatingSystem,
    [switch]$EnableVagrantCloud
)

Begin {

    # Check if Environment Variable is present to upload to Vagrant Cloud
    if ($EnableVagrantCloud.IsPresent) {
        $VagrantCloudTokenPath = Test-Path -Path Env:\VAGRANT_CLOUD_TOKEN
        if ($VagrantCloudTokenPath -eq $false) {
            Write-Error "A Vagrant Cloud Token must exist in the environment variable VAGRANT_CLOUD_TOKEN"
            exit
        }
    }

    # Checksum Values 
    $ChecksumAlgorithm = "MD5"

    $Win2012MD5Checksum = "5B5E08C490AD16B59B1D9FAB0DEF883A"
    $Win2016MD5Checksum = "70721288bbcdfe3239d8f8c0fae55f1f"

    # ISO URLs
    $Win2012ISOURL = "http://download.microsoft.com/download/6/2/A/62A76ABB-9990-4EFC-A4FE-C7D698DAEB96/9600.17050.WINBLUE_REFRESH.140317-1640_X64FRE_SERVER_EVAL_EN-US-IR3_SSS_X64FREE_EN-US_DV9.ISO"
    $Win2016ISOURL = "https://software-download.microsoft.com/download/pr/Windows_Server_2016_Datacenter_EVAL_en-us_14393_refresh.ISO"

    # Create boxtag for Vagrant Cloud, if needed
    $BoxTag = "$BoxUser/$OperatingSystem"
}

Process {
    $floppyfiles = [ordered]@{
        floppyfile1 = "./answer_files/$OperatingSystem/autounattend.xml"
        floppyfile2 = "./answer_files/$OperatingSystem/shutdown.xml"
    }

    switch -Wildcard ($OperatingSystem) {
        'Win2012R2*' {
            $packerdata = [ordered]@{
                name              = $BoxUser
                template          = "windowsserver"
                iso_url           = $Win2012ISOURL
                iso_checksum      = $Win2012MD5Checksum
                iso_checksum_type = $ChecksumAlgorithm
                guest_os_type     = "Windows2012_64"
                guest_os_version  = $OperatingSystem
            }
            if ($EnableVagrantCloud.IsPresent) {
                $vagrantclouddata = @{
                    box_tag             = $BoxTag
                    vagrant_cloud_token = $env:VAGRANT_CLOUD_TOKEN
                }
                $packerdata += $vagrantclouddata
            }
        }

        'Win2016*' {
            $packerdata = [ordered]@{
                name              = $BoxUser
                template          = "windowsserver"
                iso_url           = $Win2016ISOURL
                iso_checksum      = $Win2016MD5Checksum
                iso_checksum_type = $ChecksumAlgorithm
                guest_os_type     = "Windows2016_64"
                guest_os_version  = $OperatingSystem
            }
            if ($EnableVagrantCloud.IsPresent) {
                $vagrantclouddata = @{
                    box_tag             = $BoxTag
                    vagrant_cloud_token = $env:VAGRANT_CLOUD_TOKEN
                }
                $packerdata += $vagrantclouddata
            }
        }
    }

    # Add floppy files
    $packerdata += $floppyfiles
    
    if ($EnableVagrantCloud.IsPresent) {
        <# Check if an existing box exists to prevent Packer from displaying the following error:
        Box is inaccessible

        This occurs because an empty Vagrant Box does not exist on Vagrant Cloud
        #>
        try {
            Import-Module PSVagrantCloud -Force
            New-VagrantCloudBox -VagrantCloudUsername $BoxUser -BoxName $OperatingSystem -VagrantCloudBoxDescription "Generated by Packer Build Script" -ErrorAction SilentlyContinue
        }
        catch {
            Remove-VagrantCloudBox -VagrantCloudUsername $BoxUser -BoxName $OperatingSystem 
            New-VagrantCloudBox -VagrantCloudUsername $BoxUser -BoxName $OperatingSystem -VagrantCloudBoxDescription "Generated by Packer Build Script"
        }

        # Upload box to Vagrant Cloud if switch is present
        Write-Verbose "The following values have been supplied:"
        Write-Output $packerdata
        Start-Process 'packer' -ArgumentList "build -var `"name=$($packerdata.name)`" -var `"template=$($packerdata.template)`" -var `"iso_url=$($packerdata.iso_url)`" -var `"iso_checksum=$($packerdata.iso_checksum)`" -var `"iso_checksum_type=$($packerdata.iso_checksum_type)`" -var `"box_tag=$($packerdata.box_tag)`" -var `"floppyfile1=$($packerdata.floppyfile1)`" -var `"floppyfile2=$($packerdata.floppyfile2)`" -var `"guest_os_type=$($packerdata.guest_os_type)`" -var `"guest_os_version=$($packerdata.guest_os_version)`" .\win_vagrantcloud_build.json" -Wait -NoNewWindow
    }
    else {
        Write-Verbose "The following values have been supplied:"
        Write-Output $packerdata
        Start-Process 'packer' -ArgumentList "build -var `"name=$($packerdata.name)`" -var `"template=$($packerdata.template)`" -var `"iso_url=$($packerdata.iso_url)`" -var `"iso_checksum=$($packerdata.iso_checksum)`" -var `"iso_checksum_type=$($packerdata.iso_checksum_type)`" -var `"floppyfile1=$($packerdata.floppyfile1)`" -var `"floppyfile2=$($packerdata.floppyfile2)`" -var `"guest_os_type=$($packerdata.guest_os_type)`" -var `"guest_os_version=$($packerdata.guest_os_version)`" .\win_local_build.json" -Wait -NoNewWindow
    }
}
